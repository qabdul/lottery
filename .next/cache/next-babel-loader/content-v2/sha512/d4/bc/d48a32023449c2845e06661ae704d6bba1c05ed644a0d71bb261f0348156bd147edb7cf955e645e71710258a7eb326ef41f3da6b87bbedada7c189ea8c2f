{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from \"react\";\nimport Layout from \"../../component/Layout\";\nimport Campaign from \"../../etherium/Campaign\";\nimport { Card, Grid, Button } from \"semantic-ui-react\";\nimport web3 from \"../../etherium/web3\";\nimport Contribute from \"../../component/Contribute\";\nimport { Link } from \"../../routes\";\n\nconst show = props => {\n  const renderCards = () => {\n    const {\n      minimumContribution,\n      balance,\n      requestCount,\n      approversCount,\n      manager\n    } = props;\n    const items = [{\n      header: manager,\n      description: \"Manager will create requests and withdraw money for expenses.\",\n      meta: \"Address of Manager\",\n      style: {\n        overflowWrap: \"break-word\"\n      },\n      fluid: \"true\"\n    }, {\n      header: minimumContribution,\n      description: \"Minimum Contribution for this Campaign.\",\n      meta: \"Minimum Contribution (wei)\",\n      style: {\n        overflowWrap: \"break-word\"\n      },\n      fluid: \"true\"\n    }, {\n      header: requestCount,\n      description: \"A request tries to withdraw money from the contract to pay money to third party.Request must be approved by approvers (Who donate money to this campaign).\",\n      meta: \"No of Request\",\n      style: {\n        overflowWrap: \"break-word\"\n      },\n      fluid: \"true\"\n    }, {\n      header: approversCount,\n      description: \"No of people who have donated money to this Campaign.\",\n      meta: \"No of Approvers\",\n      style: {\n        overflowWrap: \"break-word\"\n      },\n      fluid: \"true\"\n    }, {\n      header: web3.utils.fromWei(balance, \"ether\"),\n      description: \"Total Balance, how much money is left in this campign.\",\n      meta: \"Campaign Balance in (ether)\",\n      style: {\n        overflowWrap: \"break-word\"\n      },\n      fluid: \"true\"\n    }];\n    return /*#__PURE__*/_jsx(Card.Group, {\n      items: items\n    });\n  };\n\n  return /*#__PURE__*/_jsxs(Layout, {\n    children: [/*#__PURE__*/_jsx(\"h3\", {\n      children: \"Campagin Details\"\n    }), /*#__PURE__*/_jsxs(Grid, {\n      children: [/*#__PURE__*/_jsx(Grid.Row, {\n        children: /*#__PURE__*/_jsxs(Grid.Column, {\n          computer: 10,\n          mobile: 16,\n          tablet: 10,\n          children: [/*#__PURE__*/_jsx(Link, {\n            to: `/`,\n            children: /*#__PURE__*/_jsxs(\"a\", {\n              children: [\" \", /*#__PURE__*/_jsx(Button, {\n                primary: true,\n                floated: \"left\",\n                style: {\n                  marginTop: \"10px\"\n                },\n                children: \"Back\"\n              })]\n            })\n          }), /*#__PURE__*/_jsx(Link, {\n            to: `/campaigns/${props.address}/requests`,\n            children: /*#__PURE__*/_jsxs(\"a\", {\n              children: [\" \", /*#__PURE__*/_jsx(Button, {\n                primary: true,\n                floated: \"right\",\n                style: {\n                  marginTop: \"10px\"\n                },\n                children: \"View Requests\"\n              })]\n            })\n          })]\n        })\n      }), /*#__PURE__*/_jsxs(Grid.Row, {\n        children: [/*#__PURE__*/_jsx(Grid.Column, {\n          mobile: 16,\n          tablet: 10,\n          computer: 10,\n          children: /*#__PURE__*/_jsxs(_Fragment, {\n            children: [\" \", renderCards()]\n          })\n        }), /*#__PURE__*/_jsxs(Grid.Column, {\n          mobile: 16,\n          tablet: 6,\n          computer: 6,\n          children: [\" \", /*#__PURE__*/_jsx(Contribute, {\n            address: props.address,\n            minimumContribution: props.minimumContribution\n          })]\n        })]\n      })]\n    })]\n  });\n};\n\nshow.getInitialProps = async props => {\n  const campaign = Campaign(props.query.address);\n  const result = await campaign.methods.getSummary().call();\n  return {\n    minimumContribution: result[0],\n    balance: result[1],\n    requestCount: result[2],\n    approversCount: result[3],\n    manager: result[4],\n    address: props.query.address\n  };\n};\n\nexport default show;","map":null,"metadata":{},"sourceType":"module"}